
package mydocfinder;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import java.util.Vector;
import javax.swing.*;
import java.io.*;
import java.util.Properties;
import javax.swing.JFileChooser;

public class UserInterface extends JFrame {

	public UserInterface() {
		paths = new Vector<String>();
		pathsIndex = new Vector<String>();
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Image img = toolkit.getImage("icon.png");
		this.setIconImage(img);

		props = new Properties();
		FileInputStream fis;
		FileOutputStream fos;

		try {
			fis = new FileInputStream("config.properties");
			props.load(new java.io.BufferedInputStream(fis));
		} catch (Exception e) {
			e.printStackTrace();
		}

		String propPath[] = props.getProperty("path").split(";");
		String propIndex[] = props.getProperty("index").split(";");

		for (String p : propPath) {
			System.out.println(p);
			paths.addElement(p);
		}

		for (String p : propIndex)
			pathsIndex.addElement(p);

		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		jFrame1 = new JFrame();
		docsTxt = new JTextField();
		jButton1 = new JButton();
		routeTxt = new JTextField();
		routeEnrollBtn = new JButton();
		routeDeleteBtn = new JButton();
		jScrollPane2 = new JScrollPane();
		routeList = new JList<String>(paths);
		jScrollPane3 = new JScrollPane();
		resultTable = new JTable();
		jSeparator6 = new JSeparator();
		jPanel1 = new JPanel();
		previewLable = new JLabel();
		jLabel3 = new JLabel();
		jLabel2 = new JLabel();
		jSeparator1 = new JSeparator();
		jLabel1 = new JLabel();
		jSeparator2 = new JSeparator();
		allCheckBox = new JCheckBox();
		docxCheckBox = new JCheckBox();
		pdfCheckBox = new JCheckBox();
		pptCheckBox = new JCheckBox();
		pptxCheckBox = new JCheckBox();
		htmlCheckBox = new JCheckBox();
		txtCheckBox = new JCheckBox();
		hwpCheckBox = new JCheckBox();
		xlsCheckBox = new JCheckBox();
		xlsxCheckBox = new JCheckBox();

		threadIndex = new IndexThread();
		threadSearch = new SearchThread();

		GroupLayout jFrame1Layout = new GroupLayout(jFrame1.getContentPane());
		jFrame1.getContentPane().setLayout(jFrame1Layout);
		jFrame1Layout.setHorizontalGroup(
				jFrame1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
		jFrame1Layout.setVerticalGroup(
				jFrame1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		setTitle("MyDocFinder");
		setBackground(new java.awt.Color(255, 255, 255));

		docsTxt.setText("");
		docsTxt.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				docsTxtActionPerformed(evt);
			}
		});

		jButton1.setText("문서 검색");
		jButton1.setActionCommand("검색");
		jButton1.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (paths.size() == 0) {
					JOptionPane.showMessageDialog(null, "검색 경로를 설정해주세요.");
					return;
				}

				Searcher searcher = new Searcher();

				String keyword = docsTxt.getText();
				Vector<SearchResult> res = new Vector<SearchResult>();

				for (String searchPath : paths) {
					res.addAll((searcher.searchIndex(keyword, Integer.toString(pathsIndex.indexOf(searchPath)))));
				}

				if (res.size() == 0) {
					JLabel msg = new JLabel("검색 결과가 존재하지 않습니다.");
					msg.setHorizontalAlignment(JLabel.CENTER);
					jScrollPane3.setViewportView(msg);
					return;
				}

				Vector<Vector<String>> content = new Vector<Vector<String>>();
				Vector<String> header = new Vector<String>();
				header.addElement("이름");
				header.addElement("날짜");
				header.addElement("크기");
				header.addElement("유형");
				header.addElement("경로");

				for (int i = 0; i < res.size(); i++) {
					Vector<String> row = new Vector<String>();
					row.addElement(res.get(i).getName());
					row.addElement(res.get(i).getDate().toLocaleString());
					row.addElement(res.get(i).getSize() + " KB");
					row.addElement(res.get(i).getType());
					row.addElement(res.get(i).getPath());

					content.add(row);
				}

				resultTable = new JTable(content, header);
				jScrollPane3.setViewportView(resultTable);
			}
		});

		routeTxt.setText("C:\\");

		routeEnrollBtn.setText("추가");

		routeEnrollBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				showRouteDialog();

				String path = paths.get(paths.size() - 1);

				if (pathsIndex.contains(path)) {
					System.out.println("이미 색인된 인덱스입니다.");
					return;
				} else {
					pathsIndex.addElement(path);
				}
				
				IndexThread ithread = new IndexThread();
				ithread.setPath(path, Integer.toString(pathsIndex.size() - 1));
				ithread.start();
				
				/*
				threadIndex.setPath(path, Integer.toString(pathsIndex.size() - 1));
				threadIndex.start();
				*/
			}
		});

		routeDeleteBtn.setText("삭제");
		routeDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				routeDeleteBtnActionPerformed(evt);
			}
		});

		jScrollPane2.setViewportView(routeList);

		resultTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null, null },
				{ null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null },
				{ null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null },
				{ null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null },
				{ null, null, null, null, null }, { null, null, null, null, null } },
				new String[] { "이름", "날짜", "크기", "유형", "경로" }));
		jScrollPane3.setViewportView(resultTable);

		jPanel1.setBackground(new java.awt.Color(255, 255, 255));
		jPanel1.setBorder(BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

		previewLable.setText("미리보기");
		previewLable.setVerticalAlignment(SwingConstants.TOP);

		GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
				GroupLayout.Alignment.TRAILING,
				jPanel1Layout.createSequentialGroup().addContainerGap()
						.addComponent(previewLable, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap()));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup().addContainerGap()
						.addComponent(previewLable, GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE).addContainerGap()));

		jLabel3.setText("파일 경로");

		jLabel2.setText("검색 결과");

		jLabel1.setText("파일 유형");

		allCheckBox.setSelected(true);
		allCheckBox.setText("ALL");

		docxCheckBox.setText("DOCX");

		pdfCheckBox.setText("PDF");

		pptCheckBox.setText("PPT");

		pptxCheckBox.setText("PPTX");

		htmlCheckBox.setText("HTML");

		txtCheckBox.setText("TXT");

		hwpCheckBox.setText("HWP");

		xlsCheckBox.setText("XLS");

		xlsxCheckBox.setText("XLSX");

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addComponent(docsTxt, GroupLayout.PREFERRED_SIZE, 573, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton1)
								.addGap(11, 11, 11))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout
										.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
										.addGroup(GroupLayout.Alignment.LEADING,
												layout.createSequentialGroup().addGap(13, 13, 13).addComponent(jLabel2)
														.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jSeparator6, GroupLayout.PREFERRED_SIZE, 595,
																GroupLayout.PREFERRED_SIZE))
										.addComponent(jPanel1, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE,
												GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jScrollPane3, GroupLayout.Alignment.LEADING)
										.addGroup(GroupLayout.Alignment.LEADING,
												layout.createSequentialGroup().addGroup(layout
														.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
														.addGroup(GroupLayout.Alignment.LEADING, layout
																.createSequentialGroup().addGap(13, 13, 13)
																.addComponent(
																		jLabel3)
																.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jSeparator1))
														.addGroup(GroupLayout.Alignment.LEADING,
																layout.createSequentialGroup().addGroup(layout
																		.createParallelGroup(
																				GroupLayout.Alignment.LEADING, false)
																		.addComponent(routeTxt).addComponent(
																				jScrollPane2, GroupLayout.DEFAULT_SIZE,
																				278, Short.MAX_VALUE))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(layout
																				.createParallelGroup(
																						GroupLayout.Alignment.LEADING)
																				.addComponent(
																						routeDeleteBtn)
																				.addComponent(routeEnrollBtn))))
														.addGroup(layout
																.createParallelGroup(GroupLayout.Alignment.LEADING)
																.addGroup(layout.createSequentialGroup()
																		.addGap(63, 63, 63)
																		.addGroup(layout
																				.createParallelGroup(
																						GroupLayout.Alignment.TRAILING,
																						false)
																				.addComponent(htmlCheckBox,
																						GroupLayout.DEFAULT_SIZE,
																						GroupLayout.DEFAULT_SIZE,
																						Short.MAX_VALUE)
																				.addComponent(allCheckBox,
																						GroupLayout.Alignment.LEADING)
																				.addComponent(docxCheckBox))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED,
																				GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addGroup(layout
																				.createParallelGroup(
																						GroupLayout.Alignment.LEADING)
																				.addComponent(pdfCheckBox,
																						GroupLayout.PREFERRED_SIZE, 59,
																						GroupLayout.PREFERRED_SIZE)
																				.addComponent(pptCheckBox)
																				.addComponent(pptxCheckBox,
																						GroupLayout.PREFERRED_SIZE, 57,
																						GroupLayout.PREFERRED_SIZE))
																		.addGap(4, 4, 4)
																		.addGroup(layout
																				.createParallelGroup(
																						GroupLayout.Alignment.LEADING)
																				.addComponent(txtCheckBox)
																				.addComponent(hwpCheckBox))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED,
																				GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addGroup(layout
																				.createParallelGroup(
																						GroupLayout.Alignment.LEADING)
																				.addComponent(xlsCheckBox,
																						GroupLayout.PREFERRED_SIZE, 53,
																						GroupLayout.PREFERRED_SIZE)
																				.addComponent(xlsxCheckBox))
																		.addGap(10, 10, 10))
																.addGroup(GroupLayout.Alignment.TRAILING, layout
																		.createSequentialGroup().addGap(19, 19, 19)
																		.addComponent(jLabel1)
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jSeparator2,
																				GroupLayout.PREFERRED_SIZE, 247,
																				GroupLayout.PREFERRED_SIZE)))))
								.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addGap(34, 34, 34)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
						.addComponent(docsTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(jButton1))
				.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
						.addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(layout.createSequentialGroup().addGap(13, 13, 13)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
										.addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 2,
												GroupLayout.PREFERRED_SIZE))))
				.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(routeTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(routeEnrollBtn))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 52,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(routeDeleteBtn)))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(allCheckBox).addComponent(txtCheckBox).addComponent(xlsxCheckBox))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(docxCheckBox).addComponent(hwpCheckBox).addComponent(xlsCheckBox))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(htmlCheckBox))
						.addGroup(layout.createSequentialGroup().addComponent(pdfCheckBox)
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(pptCheckBox)
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(pptxCheckBox)))
				.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(jLabel2)
						.addComponent(jSeparator6, GroupLayout.PREFERRED_SIZE, 3, GroupLayout.PREFERRED_SIZE))
				.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
				.addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 218, GroupLayout.PREFERRED_SIZE)
				.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
				.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
				.addContainerGap()));

		pack();
	}// </editor-fold>

	private void docsTxtActionPerformed(java.awt.event.ActionEvent evt) {

	}

	private void routeDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {
		int idx = routeList.getSelectedIndex();
		if (idx == -1)
			return;

		pathsIndex.remove(pathsIndex.indexOf(paths.get(idx)));
		paths.remove(idx);

		routeList = new JList<String>(paths);
		jScrollPane2.setViewportView(routeList);
	}

	private void showRouteDialog() {
		// 취소 눌렀을 때 취소가 안됨
		JFileChooser jfc = new JFileChooser();
		jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jfc.showDialog(this, null);
		File dir = jfc.getSelectedFile();

		if (dir == null)
			return;

		paths.addElement(dir.getPath());
		routeList = new JList<String>(paths);
		jScrollPane2.setViewportView(routeList);
	}

	public void saveProps(String propFile) {
		try {
			System.out.println("Saving Properties..");
			String path = "", index = "";

			for (String p : paths)
				path += (p + ";");

			for (String p : pathsIndex)
				index += (p + ";");

			props.put("path", path);
			props.put("index", index);

			props.save(new FileOutputStream(propFile), "");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	public void display() {
		try {
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				UserInterface ui = new UserInterface();
				ui.setVisible(true);
				ui.saveProps("config.properties");
			}
		});
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				UserInterface ui = new UserInterface();
				ui.setVisible(true);

				// JVM이 종료할 때 특정 작업 무조건 수행하기.
				Runtime.getRuntime().addShutdownHook(new Thread() {
					public void run() {
						ui.saveProps("config.properties");
					}
				});
			}
		});
	}

	// Variables declaration - do not modify
	private JCheckBox allCheckBox;
	private JTextField docsTxt;
	private JCheckBox docxCheckBox;
	private JCheckBox htmlCheckBox;
	private JCheckBox hwpCheckBox;
	private JButton jButton1;
	private JFrame jFrame1;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JPanel jPanel1;
	private JScrollPane jScrollPane2;
	private JScrollPane jScrollPane3;
	private JSeparator jSeparator1;
	private JSeparator jSeparator2;
	private JSeparator jSeparator6;
	private JCheckBox pdfCheckBox;
	private JCheckBox pptCheckBox;
	private JCheckBox pptxCheckBox;
	private JLabel previewLable;
	private JTable resultTable;
	private JButton routeDeleteBtn;
	private JButton routeEnrollBtn;
	private JList<String> routeList;
	private JTextField routeTxt;
	private JCheckBox txtCheckBox;
	private JCheckBox xlsCheckBox;
	private JCheckBox xlsxCheckBox;

	private Vector<String> paths;
	private Vector<String> pathsIndex;
	private IndexThread threadIndex;
	private SearchThread threadSearch;
	Properties props;
	// End of variables declaration
}

class IndexThread extends Thread {
	private Indexer indexer;
	private String dirPath;
	private String indexPath;

	IndexThread() {
		indexer = new Indexer();
	}

	public void run() {
		try {
			indexer.createIndex(dirPath, indexPath);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void setPath(String dir, String index) {
		dirPath = dir;
		indexPath = index;
	}
}

class SearchThread extends Thread {
	private Searcher searcher;
	private String keyword;
	private String indexPath;
	Vector<SearchResult> result;

	SearchThread() {
		searcher = new Searcher();
	}

	public void run() {
		try {
			result = new Vector<SearchResult>(searcher.searchIndex(keyword, indexPath));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void setKeyword(String keyword) {
		this.keyword = keyword;
	}

	public Vector<SearchResult> getResult() {
		return result;
	}

	public void setPath(String index) {
		indexPath = index;
	}
}
